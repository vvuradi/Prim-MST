import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashSet;
import java.util.Random;

/* generates the graph. It generates via two modes. Input from
 file and through random generator.*/
public class GraphGenerator {
	static int noOfVertices;
	static int noOfEdges;
	HashSet<Vertex> vertexPool = new HashSet<Vertex>();

	public int getNoOfVertices() {
		return noOfVertices;
	}

	/*
	 * vertexPool contains all vertices generated by graph. This method returns
	 * the set.
	 */
	public HashSet<Vertex> getVtxPool() {
		return new HashSet<Vertex>(vertexPool);
	}

	// generates graph based on random numbers.
	public void generateRandomGraph(int n, int density) {
		Random r = new Random();
		// nC2 = n*(n-1)/2 --> total no of edges in a graph of n vertices.
		int NumberOfEdges = ((((n * (n - 1)) / 2) * density) / 100);
		int edgesNum = 0;
		while (edgesNum < NumberOfEdges) {
			int source, dest, weight;
			source = r.nextInt(n);
			dest = r.nextInt(n);
			if (source == dest) {// an edge cannot be from A to A.
				continue;
			}
			weight = r.nextInt(1000) + 1;

			// created vertices
			Vertex vtxSrc = getVertex(source);
			Vertex vtxDst = getVertex(dest);

			// checking if edge already exists between the vertices.
			HashSet<Edge> tempEdges = vtxSrc.getAllEdges();
			for (Edge e : tempEdges) {
				if (e.dst.name == vtxDst.name)
					continue;
			}
			// creating nodes (edges)
			Node e1 = new Node(vtxSrc, vtxDst, weight);
			Node e2 = new Node(vtxDst, vtxSrc, weight);
			vtxSrc.addEdge(e1);// adding edge to vertex
			vtxDst.addEdge(e2);
			edgesNum++;
		}
		// System.out.println("random done - size is " + edgesNum);
	}

	/*
	 * returns the vertex if available else creates a new vertex and returns
	 * it.
	 */
	public Vertex getVertex(int vtx) {
		for (Vertex v : vertexPool) {
			if (v.name == vtx) {
				return v;
			}
		}
		Vertex newVertex = new Vertex(vtx);
		vertexPool.add(newVertex);
		return newVertex;
	}

	// generates graph based on the file input given.
	public void generateGraph(Prim pScheme, String fName) throws Exception {
		boolean firstLine = true;
		try {
			BufferedReader br = new BufferedReader(new FileReader(fName));
			int count = 0;
			while (br != null && br.ready()) {
				String lRead = br.readLine();
				String[] inputs = lRead.split(" +");
				// the first line contains only 2 values.
				// no of vertices and no of edges.
				if (firstLine) {
					firstLine = false;
					if (inputs.length != 2)
						throw new Exception("Wrong input format");
					noOfVertices = Integer.parseInt(inputs[0]);
					noOfEdges = Integer.parseInt(inputs[1]);
				} else { // reading all edges
					if (inputs.length != 3)
						throw new Exception("Wrong input format");
					int src = Integer.parseInt(inputs[0]);
					int dst = Integer.parseInt(inputs[1]);
					int weight = Integer.parseInt(inputs[2]);
					Vertex vtxSrc = getVertex(src); // vertex created
					Vertex vtxDst = getVertex(dst);
					Node e1 = new Node(vtxSrc, vtxDst, weight);
					Node e2 = new Node(vtxDst, vtxSrc, weight);
					vtxSrc.addEdge(e1);
					vtxDst.addEdge(e2);
				}
				count++;
			}
			br.close();
			if (count - 1 != noOfEdges)
				throw new Exception("Edges not matched as per input");
			if (noOfVertices != vertexPool.size())
				throw new Exception("Vertices not matched as per input");
			// System.out.println("Welcome to " + pScheme.getClass());
		} catch (NumberFormatException numFormat) {
			throw new Exception("Invalid Input - " + numFormat.getMessage());
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}
}
